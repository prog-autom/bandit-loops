# See the paper for experiment description

#
# General experiment parameters
#

# We fix random seed here
random_seed: 47

# Number of trial or runs to repeat the experiment
run_times: 30


# Models and their parameters to use
# Any key in this object will trigger a corresponding model builder
# The ``ridge_model`` inits a builder for an Sklearn RidgeCV model
default_model: &default_params
  ts_model:
    M: 10
    l: 4
  random_model:
    M: 10
    l: 4

#
# Definition of experiment stages
#

bandit_loops: &bandit_loops !BasicStage
  name: bandit_loops
  params: &bandit_loop_params
    model_params:
      <<: *default_params
    experiment: &default_experiment
      T: 1000
      w: 10.0
      Q: 1.0
      p: 0.9
      b: 0.0
  outputs:
    - !path
      path:  !line |
              ./results/${self.name}/${root.random_seed}/
              ${self.params.experiment.T}-
              ${self.params.experiment.w}/
              ${self.params.experiment.Q}-
              ${self.params.experiment.p}

  script:
    - >
      python3 ./src/main.py bandit-loop \
                     --model_params "${json(self.params.model_params)}" \
                     --params "${json(self.params.experiment)}" \
                     --folder "${self.outputs[0].path}" \
                     --random_seed "${root.random_seed}" \
                     --run_times "${root.run_times}"
    - >
      echo "${json(self.params)}" > "${self.outputs[0].path}/params.json"

# This is basic pipeline to run our two stages in sequence
pipeline: !GenericPipeline
  runs:
    - *bandit_loops

# This pipeline is intended to be run the run_experiment script
# It receives the following parameters from the environment
# ``env.w``
run_model_experiment: !GenericPipeline
  runs:
    # We define an anonymous inline stage that reuses our previous hidden_loops stage
    # It is convenient to reuse the stage definition to change some of the parameters
    - !BasicStage
      <<: *bandit_loops
      params:
        <<: *bandit_loop_params
        experiment:
          <<: *default_experiment
          T: 1000
          # for this pipeline we redefine some parameters
          # and use the ones from the environment
          # they will still be in the json dump
          w: ${env.w}


base_grid_stage: &base_grid_stage 
  inputs:
    - !path
      path: ./src
    - !path
      files:
        - ./experiment.yml
        - ./explore_params.yml
        - requirements.txt
  outputs:
    - !path
      path:  !line |
        ./results/${self.name}/${root.random_seed}
  env:
    PYTHONPATH: '${env.PYTHONPATH}:./src:./.mldev'
    TARGETFOLDER: "${self.outputs[0].path}"
    RANDOMSEED: "${root.random_seed}"
    

run_grid: !GenericPipeline
  runs:
    - !BasicStage
      <<: *base_grid_stage
      name: grid_search
      script:
        - mldev run -f ./explore_params.yml grid_pipeline

run_big_Ml_grid: !GenericPipeline
  runs:
    - !BasicStage
      <<: *base_grid_stage
      name: big_params_grid
      script:
        - mldev run -f ./explore_params.yml big_grid_pipeline


winstreak_grid: !GenericPipeline
  runs:
    - !BasicStage 
      <<: *base_grid_stage
      name: winstreak_grid
      script:
        - mldev run -f ./explore_params.yml winstreak
        
        
winstreak_random_grid: !GenericPipeline
  runs:
    - !BasicStage 
      <<: *base_grid_stage
      name: winstreak_grid
      script:
        - mldev run -f ./explore_params-random.yml winstreak_random        
        
restarts_grid: !GenericPipeline
  runs:
    - !BasicStage
      <<: *base_grid_stage
      name: restarts_grid
      script:
        - mldev run -f ./explore_params.yml restarts
